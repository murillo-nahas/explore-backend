generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model State {
  id               String @id @default(uuid())
  name             String @unique 
  country          String @unique
  acronym          String 
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")
  cities           City[]
}

model City {
  id              String @id @default(uuid())
  name            String
  zipCode         String @unique @db.VarChar(8) @map("zip_code")
  googleMapsUri   String @unique @map("google_maps_uri")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")
  stateId         String @map("state_id")
  places          Place[]

  state State @relation(fields: [stateId], references: [id], onDelete: Cascade)
}

model Category {
  id                String @id @default(uuid())
  name              String @unique
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")
  places            Place[]
}

model Place {
  id                String @id @default(uuid())
  name              String
  overview          String 
  googleMapsUri     String @unique @map("google_maps_uri")
  street            String
  number            String
  district          String
  zipCode           String @unique @db.VarChar(8) @map("zip_code")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")
  cityId            String @map("city_id")
  categoryId        String @map("category_id")

  city City @relation(fields: [cityId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Waitlister {
  id                String @id @default(uuid())
  email             String @unique
  firstname         String 
  createdAt         DateTime @default(now()) @map("created_at")
}